import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3

from functions import get_movie_link, get_movie_description
from tokens import API_TOKEN

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect('movie_bot_db.db')
cursor = conn.cursor()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton(text="/üÜò"),
        types.KeyboardButton(text="/üï∞"),
        types.KeyboardButton(text="/üìä"),
    ]
    keyboard.add(*buttons)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ñ–∏–ª—å–º–æ–≤. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É "
        "–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /help",
        reply_markup=keyboard
    )


@dp.message_handler(lambda message: message.text.lower() in ['/help', '/üÜò'])
async def help_command(message: types.Message):
    help_text = "üåü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
    help_text += "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
    help_text += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
    help_text += "/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    help_text += "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º\n"
    help_text += "\n*–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.*\n"
    await message.answer(help_text, parse_mode='Markdown')


def create_history_table(user_id):
    cursor.execute(f'''
        CREATE TABLE IF NOT EXISTS search_history_{user_id} (
            query TEXT,
            search_date TEXT
        )
    ''')


@dp.message_handler(lambda message: message.text.lower() in ['/history', '/üï∞'])
async def history_command(message: types.Message):
    user_id = message.from_user.id

    create_history_table(user_id)

    cursor.execute(f'SELECT query, search_date FROM search_history_{user_id}')
    history_entries = cursor.fetchall()

    if history_entries:
        history_text = "üóì *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:*\n\n"
        for entry in history_entries:
            history_text += f" __{entry[1]}: {entry[0]}__\n"

        await message.answer(history_text, parse_mode='Markdown')
    else:
        await message.answer("üï∞ *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.*", parse_mode='Markdown')


@dp.message_handler(lambda message: message.text.lower() in ['/stats', '/üìä'])
async def stats_command(message: types.Message):
    user_id = message.from_user.id

    create_history_table(user_id)

    cursor.execute(f'SELECT LOWER(query), COUNT(LOWER(query)) FROM search_history_{user_id} GROUP BY LOWER(query)')
    stats_entries = cursor.fetchall()

    if stats_entries:
        stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º:* \n\n"
        for entry in stats_entries:
            stats_text += f"__{entry[0]}: {entry[1]} —Ä–∞–∑(–∞)__\n"

        await message.answer(stats_text, parse_mode='Markdown')
    else:
        await message.answer("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º –ø—É—Å—Ç–∞.*", parse_mode='Markdown')


@dp.message_handler(content_types=['text'])
async def search_movies(message: types.Message):
    query = message.text.upper()
    user_id = message.from_user.id
    create_history_table(user_id)

    link = await get_movie_link(query)
    movie_data = await get_movie_description(query)

    if link and movie_data:
        poster_url = movie_data['poster']['url']
        response_text = (
            f"*{movie_data['name']}* | {movie_data['enName']}\n"
            f"*–†–µ–π—Ç–∏–Ω–≥ IMDb:* {movie_data['rating']['imdb']}\n"
            f"\n"
            f"*–¢–∏–ø:* {movie_data['type'].capitalize()}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {movie_data['description']}\n"
            f"\n"
            f"*–°—Ç–∞—Ç—É—Å:* {movie_data['status'].capitalize() if movie_data['isSeries'] and movie_data.get('status') else '-'}\n"
            f"*–ñ–∞–Ω—Ä—ã:* {', '.join(genre['name'] for genre in movie_data['genres'])}\n"
            f"*–°—Ç—Ä–∞–Ω–∞ –≤—ã–ø—É—Å–∫–∞:* {', '.join(country['name'] for country in movie_data['countries'])}\n"
            f"*–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:* {', '.join(str(year['start']) + '-' + str(year['end']) for year in movie_data['releaseYears']) if movie_data['releaseYears'] else '-'}\n"
        )

        keyboard = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É", url=link)
        keyboard.add(button)

        await bot.send_photo(message.chat.id, poster_url, caption=response_text, parse_mode='Markdown',
                             reply_markup=keyboard)

        cursor.execute(f'INSERT INTO search_history_{user_id} (query, search_date) VALUES (?, datetime("now"))',
                       (query,))
        conn.commit()
    else:
        response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await bot.send_message(message.chat.id, response_text)


if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
